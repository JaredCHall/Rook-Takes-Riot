<board-options>
    <h3> Options:</h3>
    <div>
        <button class="button" onclick={() => board.flipBoard()}>
            Flip Board
        </button>
    </div>
    <div>
        <button class="button" onclick={()  => board.toggleLabels()}>
            Toggle Labels
        </button>
    </div>
    <div>
        <button class="button" onclick={() => board.togglePieces()}>
           Toggle Pieces
        </button>
    </div>
    <div>
        <button class="button" onclick={() => randomPuzzle()}>
            Random Puzzle
        </button>
    </div>
    <div>
        <button class="button button-red" onclick={() => undoLastMove()}>
            Undo Last Move
        </button>
    </div>
    <hr>
    <div>

        <fieldset>
            <h3>FEN:</h3>
            { board.getFen() }
            <input name="fenNumber" type="text"  onfocus={() => clearFenError()}>
            <div if={state.fenError} class="error-text" style="margin-bottom: 1rem">
                {state.fenError}
            </div>
            <div  style="text-align: right">
                <button class="button button-white" onclick={() => setFen()} style="text-align: right">Update</button>
            </div>
        </fieldset>

    </div>

    <script lang="ts">
        import GameEngine from 'ChessGame/GameEngine.ts'
        import {RiotComponent} from "riot";

        interface Props {
            board: RiotComponent
        }

        export default {
            board: null,
            onBeforeMount(props: Props){
                if(props.board === null){
                    throw new Error("must set board property")
                }
                this.board = props.board
            },
            randomPuzzle() {
                const puzzles = GameEngine.puzzles
                const fen = puzzles[Math.floor(Math.random() * puzzles.length)]
                this.setFen(fen)
            },
            setFen(fen) {
                fen = fen ?? this.$('input[name="fenNumber"]').value
                try {
                    this.board.setGameFenNumber(fen)
                }catch (e) {
                    this.update({fenError: e.message})
                }
                this.update()
            },
            undoLastMove() {
                this.board.undoLastMove()
            },
            clearFenError() {
                this.update({fenError: null})
            },
        }
    </script>

</board-options>