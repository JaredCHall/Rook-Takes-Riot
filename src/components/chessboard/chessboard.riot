<chessboard class="container-content">

    <h1 if={state.greeting}>{state.greeting}</h1>
    <div class="row">

        <div class="column">
            <svg viewBox="0 0 800 800" style="min-width:60rem;max-width:90rem;width: auto">
                <svg
                    each={ (name, index) in getSquareNames() }
                    is="square" name={name}
                    index={index}
                    selected={state.selectedSquare === name}
                    width=100
                    board={this}
                    ></svg>
            </svg>
        </div>


        <div class="column options" style="width:20rem; text-align: left;" if={state.showOptions}>
            <board-options board={this}></board-options>
        </div>
    </div>

    <script lang="ts">
        import {RiotComponent} from "riot";
        import Square from "./square/square.riot"
        import BoardOptions from "./board-options/board-options.riot"
        import ChessGame from 'ChessGame/ChessGame.ts'
        import BasicMove from "../../classes/ChessGame/Moves/BasicMove";

        interface Props {
            greeting: string,
            showOptions: boolean,
            selectedSquare: string,
        }
        interface State {
            mode: string, // 'play' or 'edit'
            orientation: string,
            showLabels: boolean,
            showPieces: boolean,
            greeting: string,
            showOptions: boolean,
            selectedSquare: string,
            indicatedMoves: Array<string>,
        }

        export default {
            chessGame: undefined, // ChessGame
            squares: [], // Array<Square>

            components: {Square, BoardOptions},
            state: {
                mode: 'play',
                orientation: 'white',
                showLabels: false,
                showPieces: false,
                indicatedMoves: [],
            },
            onBeforeMount(props: Props, state: State) {
                this.gamePosition = new ChessGame(null, this.onMove)

                state.greeting = props.greeting
                state.showOptions = props.showOptions
                state.selectedSquare = props.selectedSquare
            },
            onMounted() {

                // register square elements in the squares property
                const squareElements = this.root.querySelectorAll('svg.square')
                this.squares = [];
                for(let i = 0; i < squareElements.length; i++){
                    const el = squareElements[i]
                    this.squares.push(el.riot)
                }

                // set game position
                this.setGamePosition(null)
            },
            getSquareNames(): Array<string> {
                return ChessGame.allSquareNames();
            },
            getSquare(key): Element {
                if(typeof key === 'string'){
                    return this.squares[ChessGame.getSquareIndex(key)]
                }

                return this.squares[key];
            },
            orientBoard(color): void {
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.setOrientation(color)
                }
                this.update({
                    orientation: color
                })
            },
            getFen(): string {
                return this.gamePosition.fen
            },
            getGamePosition(): ChessGame
            {
                return this.gamePosition;
            },
            setGamePosition(fen: string|null): void {
                console.log('set: '+fen)
                if(fen !== null){
                    this.gamePosition.setGameState(fen)
                }

                const positions = this.gamePosition.piecePositions

                for(const squareName in positions){
                    const piece = positions[squareName]
                    this.getSquare(squareName).setPiece(piece)
                }
            },
            setSelectedSquare(squareName: string): void {
                this.update({
                    selectedSquare: squareName,
                })
            },
            showMoveIndicators(squares: Array<string>): void {
                this.clearMoveIndicators()

                for(let i = 0; i<squares.length; i++){
                    this.getSquare(squares[i]).showMoveIndicator(true)
                }
                this.state.indicatedMoves = squares
            },
            getMode(): string {
                return this.state.mode;
            },
            clearSelections() {
                for(let i = 0; i<this.squares.length; i++){
                    this.squares[i].showSelected(false)
                }
                this.clearMoveIndicators()
            },
            isSelectionAnIndicatedMove(squareName: string): boolean{
                return this.state.indicatedMoves.indexOf(squareName) !== -1;
            },
            onMove(move: BasicMove){
                const oldSquare = this.getSquare(move.oldSquare)
                const newSquare = this.getSquare(move.newSquare)
                const piece = move.piece ?? oldSquare.getPiece()
                oldSquare.setPiece(null)
                newSquare.setPiece(piece)
            },
            moveSelectedPiece(squareName: string){
                this.gamePosition.makeMove(this.state.selectedSquare, squareName)
                this.clearSelections()
            },
            clearMoveIndicators() {
                for(let i = 0; i<this.squares.length; i++){
                    this.squares[i].showMoveIndicator(false)
                }
                this.state.indicatedMoves = [];
            },
            togglePieces() {
                const showPieces = !this.state.showPieces
                if(showPieces){
                    this.setGamePosition(ChessGame.getNewGameFEN())
                }else{
                    this.setGamePosition(ChessGame.getEmptyBoardFEN())
                }
                this.update({
                    showPieces: showPieces,
                })
            },
            toggleLabels() {
                for(let i=0; i<this.squares.length; i++){
                    const square = this.squares[i]
                    square.toggleLabel()
                }
                this.update({
                    showLabels: !this.state.showLabels,
                })
            },
            flipBoard() {
                this.orientBoard(this.state.orientation === 'white' ? 'black' : 'white')
            },
        }

    </script>

</chessboard>
