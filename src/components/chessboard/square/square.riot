<square
        xmlns="http://www.w3.org/2000/svg"
        width={props.width}
        height={props.width}
        x={state.x}
        y={state.y}
        viewBox="0 0 50 50"
        class="square" onclick={() => toggleSelected()}>

    <rect width="50" height="50" class="{state.color}-square"></rect>
    <rect width="50" height="50" class="square-{state.color}-selected" if={state.selected || isSquareSelected()}></rect>

    <text x="5" y="45" class="square-label stroke-{state.color}" if={state.showLabel || props.board.getShowLabels()}>
        {props.name}
    </text>

    <svg is="piece" piece-name={state.piece.type}  width="40" x="4" y="5" color={state.piece.color} if={state.piece}></svg>

    <g class="move-indicator" if={isCaptureIndicated()}>
        <polygon points="0,0 0,10 10,0"></polygon>
        <polygon points="50,0 40,0 50,10"></polygon>
        <polygon points="0,50 0,40 10,50"></polygon>
        <polygon points="50,50 40,50 50,40"></polygon>
    </g>

    <circle cx="25" cy="25" r="6" class="move-indicator" if={isRegularMoveIndicated()} />

    <script lang="ts">
        import Piece from "Chessboard/piece/piece.riot"
        import GameEngine from 'ChessGame/GameEngine.ts'
        import ChessPiece from "ChessGame/ChessPiece.ts";

        interface Props {
            name: string,
            width: number,
            index: number,
            selected: boolean,
            color: string,
        }

        interface State {
            x: number,
            y: number,
            selected: boolean,
            showLabel: boolean,
            gamePiece: string,
            gamePieceColor: string,
            color: string,
            orientation: string,
        }

        export default {
            components: {Piece},
            state: {
                orientation: 'white',
                piece: null,
                showLabel: false,
                showMoveIndicator: false,
            },
            onBeforeMount(props: Props, state: State) {
                if(props.index === null || props.name === null){
                    throw new Error("Must set name and index properties")
                }

                const orientation = 'white'
                const coords = this.getXYPosition(props.name, orientation)
                state.x = coords[0]
                state.y = coords[1]
                state.color = GameEngine.getSquareColor(props.name)
                state.selected = props.selected ?? false

            },
            onMounted(props: Props) {
                this.root.riot = this
            },
            getXYPosition(name, orientation) {

                const position = GameEngine.getSquarePosition(name, orientation)

                const x = position[0] * 100;
                const y = position[1] * 100;

                return [x, y]
            },
            setOrientation(orientation) {
                const coords = this.getXYPosition(this.props.name, orientation)
                this.update({
                    x: coords[0],
                    y: coords[1],
                })
            },
            setPiece(piece: ChessPiece|null) {
                this.update({
                    piece: piece,
                })
            },
            getPiece(): Piece|null {
                return this.state.piece
            },
            isSquareSelected(): boolean {
                return this.props.board.state.selectedSquare === this.props.name
            },
            isCaptureIndicated(): boolean{
                if(!this.state.piece){
                    return false
                }

                return this.isMoveIndicated()

            },
            isRegularMoveIndicated(): boolean {
                if(this.state.piece){
                    return false
                }

                return this.isMoveIndicated()
            },
            isMoveIndicated(): boolean {
                return this.props.board.state.indicatedMoves.hasOwnProperty(this.props.name)
            },
            showSelected(show: boolean){
                this.props.board.setSelectedSquare(show ? this.props.name : null);
            },
            toggleSelected(): void {
                // if clicking selected square, de-select it
                if(this.isSquareSelected()){
                    this.props.board.setSelectedSquare(null)
                    return
                }

                this.select()
            },
            getGameEngine(): GameEngine {
                return this.props.board.gameEngine
            },
            select() {
                const board = this.props.board

                if(board.getMode() == 'play'){

                    // allow legal moves
                    if(this.isMoveIndicated()){
                        board.moveSelectedPiece(this.props.name)
                        return;
                    }

                    // don't select empty squares
                    if(this.state.piece === null){
                        board.clearIndicators()
                        return;
                    }

                    // don't select wrong color pieces
                    const movingPieceColor = this.state.piece.color.charAt(0)
                    const colorToMove = this.getGameEngine().isWhiteMoving() ? 'w' : 'b'
                    if(colorToMove != movingPieceColor){
                        board.clearIndicators()
                        return
                    }
                }

                // show legal moves
                const moves = board.gameEngine.getMoves(this.props.name)
                board.setSelectedSquare(this.props.name, moves)
            },
            toggleLabel() {
                this.update({showLabel: !this.state.showLabel})
            },
        }
    </script>

    <style type="sass">

        .square-label
            font-size: 10px

        .square-black-selected
            fill: hotpink
            fill-opacity: 0.65

        .square-white-selected
            fill: hotpink
            fill-opacity: 0.35

    </style>

</square>