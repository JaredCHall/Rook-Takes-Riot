<moves-table>

    <table class="move-history-table">
        <tbody>
            <tr each={fullMove in getMoveRows()}>
                <td class="row-heading">{fullMove.moveCounter}</td>
                <td is="moves-table-item" movesTable={this} move={fullMove.move1}></td>
                <td is="moves-table-item" movesTable={this} move={fullMove.move2}></td>
            </tr>
        </tbody>
    </table>
    <div class="row move-nav-panel">
        <div class="column move-nav-button" onclick={() => showFirstMove()}>&lt&lt</div>
        <div class="column move-nav-button" onclick={() => showPreviousMove()}>&lt</div>
        <div class="column move-nav-button" onclick={() => showNextMove()}>&gt</div>
        <div class="column move-nav-button" onclick={() => showLastMove()}>&gt&gt</div>
    </div>



    <script lang="ts">
        import {RiotComponent} from "riot";
        import MoveHistory from "../../../classes/ChessGame/GameState/MoveHistory/MoveHistory";
        import ChessMove from "../../../classes/ChessGame/Moves/ChessMove";
        import MovesTableItem from "./moves-table-item.riot"
        import MoveHistoryItem from "../../../classes/ChessGame/GameState/MoveHistory/MoveHistoryItem";

        interface Props {
            board: RiotComponent
        }

        interface State {
            moveHistory: MoveHistory,
        }

        export default {
            components: {MovesTableItem},
            board: undefined,
            moveHistory: undefined,
            onBeforeMount(props: Props, state: State){
                if(props.board === undefined){
                    throw new Error("must set board property")
                }
                this.board = props.board
                this.moveHistory = this.board.getGameEngine().gameState.moveHistory
            },
            showSelectedMove(moveIndex: number): void {
                this.board.showMove(moveIndex)
            },
            showPreviousMove(): void {
                const i = this.getSelectedIndex()
                if(i === 0){
                    return
                }
                this.showSelectedMove(i - 1)
            },
            showNextMove(): void {
                const i = this.getSelectedIndex()
                const len = this.moveHistory.length()

                if(1 === len){
                    return
                }
                this.showSelectedMove(i + 1)
            },
            showFirstMove(): void {
                this.showSelectedMove(0)
            },
            showLastMove(): void {
                this.showSelectedMove(this.moveHistory.length() - 1)
            },
            getMoveRows(): {moveCounter:number, move1: MoveHistoryItem, move2: null|MoveHistoryItem}[] {
                const moveHistory = this.board.getGameEngine().gameState.moveHistory
                const moves = moveHistory.all()

                let rows = []
                for(let i:number=0; i < moveHistory.length(); i += 2 ){
                    const row = {
                        moveCounter: moves[i].fenBefore.fullMoveCounter,
                        move1: moves[i],
                        move2: moves[i+1] ?? null
                    }
                    rows.push(row)

                }
                return rows
            },
            getSelectedIndex(): number|null{
                return this.board.getGameEngine().gameState.currentMove.moveIndex
            },
        }
    </script>

    <style type="sass">

        table
          box-shadow: 0.1rem 0.1rem #1e1c1c
          margin-bottom: 0

          td
            border-bottom: none
            font-weight: bold

          td.move-record
            padding: .5rem 4rem
            color: black
            background-color: cadetblue

          td.move-record:hover
            background-color: darkslategray
            color: gainsboro
            cursor: pointer

          td.selected
            background-color: darkslategray
            color: gainsboro
            text-decoration: none

          td.row-heading
              background-color: black
              color: aquamarine
              padding: .5rem 0 .5rem 1rem
              border-right: 1pt solid aquamarine


      div.move-nav-panel
        padding: 0 1rem

      .move-nav-panel .column
          background-color: black
          color: aquamarine
          text-align: center
          font-size: large
          font-weight: bold

          &:hover
            background-color: aquamarine
            color: black

    </style>

</moves-table>