<what-color-is-the-square>
    <div class="exercise-area">

        <h1>What Color Is the Square</h1>

        <div class="square-name" if={!state.isAnswered}>
            { state.square }
        </div>

        <div class="result" style="width:120rem; margin: 0 auto" if={state.isAnswered}>
            <div class="result-annotation fades-out correct-answer" if={state.isAnswerCorrect}>
                !!
            </div>
            <div class="result-annotation fades-out wrong-answer" if={!state.isAnswerCorrect}>
                ??
            </div>
            <div class="result-chessboard hidden">
                <chessboard selected-square={state.square}></chessboard>
            </div>
        </div>

        <div class="prompt" if={!state.isAnswered}>
            <button class="button button-white" onclick={() => answerQuestion('white')}>It's white</button>
            <button class="button button-black" onclick={() => answerQuestion('black')}>It's black</button>
        </div>

        <div if="{state.isAnswered}">
            <button class="button margin-top2" onclick={() => askQuestion()}>Go Again!</button>
        </div>

    </div>


    <script lang="ts">
        import GameEngine from "ChessGame/ChessGame.ts";
        import Chessboard from "Chessboard/chessboard.riot"

        interface Props {}

        interface State {
            isAnswered: boolean,
            expectedAnswer: string,
            isAnswerCorrect: boolean,
            square: string,
        }

        export default {
            components: {
                Chessboard,
            },
            state: {
                isAnswered: false,
                expectedAnswer: null,
                isAnswerCorrect: null,
                square: null,
            },
            onMounted(props: Props, state: State) {
                this.askQuestion()
                this.openFullScreen()
            },
            openFullScreen() {
                const node = this.root;
                if(!node.requestFullscreen){
                    alert("Full screen not supported by your browser");
                    return;
                }
                node.requestFullscreen({
                    navigationUI: "hide"
                });
            },
            closeFullScreen() {
                const node = this.root;
                node.exitFullscreen();
            },
            askQuestion() {

                const index = Math.floor(Math.random() * ChessGame.allSquareNames().length);
                const name = ChessGame.getSquareName(index);

                this.update({
                    isAnswered: false,
                    expectedAnswer: ChessGame.getSquareColor(name),
                    square: name,
                })

            },
            answerQuestion(answer) {
                this.update({
                    isAnswered: true,
                    isAnswerCorrect: answer === this.state.expectedAnswer
                })
                const resultAnnotation = this.$('.result-annotation')
                setTimeout(function(){
                    resultAnnotation.classList.add('faded')
                }, 0);

                const resultVisualDemonstration = this.$('.result-chessboard')
                setTimeout(function(){
                    resultAnnotation.classList.add('hidden')
                    resultVisualDemonstration.classList.remove('hidden')
                }, 500);
            },
        }
    </script>

    <style>

        div.square-name {
            font-size: 20rem;
        }

        div.prompt button {
            margin-left: 2rem;
        }
        div.result button {
            margin-left: 2rem;
        }

        div.result span {
            display:inline-block;
            padding: 1rem 2rem;
            font-weight: bolder;
            font-size: 2rem;

        }

        .correct-answer {
            color: lightgreen;
            font-size: 40rem;
        }

        .wrong-answer {
            color: indianred;
            font-size: 40rem;
        }

        .prompt {
            /*display: grid;*/
        }

    </style>

</what-color-is-the-square>